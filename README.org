#+PROPERTY: header-args:R   :cache yes :session readme-r :results value :exports both
#+OPTIONS: toc:nil

#+BEGIN_EXPORT html
[![CRANStatusBadge](http://www.r-pkg.org/badges/version/lagged)](https://cran.r-project.org/package=lagged)
[![Build Status](https://travis-ci.com/GeoBosh/lagged.svg?branch=master)](https://travis-ci.com/GeoBosh/lagged)
[![Coverage Status](https://coveralls.io/repos/github/GeoBosh/lagged/badge.svg?branch=master)](https://coveralls.io/github/GeoBosh/lagged?branch=master)
#+END_EXPORT

R package 'lagged' provides classes and methods for objects, like autocovariances, whose
natural indexing starts from zero.

* Installing lagged

The [[https://cran.r-project.org/package=lagged][latest stable version]] is on CRAN. 
#+BEGIN_EXAMPLE
install.packages("lagged")
#+END_EXAMPLE
The vignette shipping with the package gives illustrative examples.
=vignette("Guide_lagged", package = "lagged")=.

You can install the [[https://github.com/GeoBosh/lagged][development version]] of =lagged= from Github:
#+BEGIN_EXAMPLE
library(devtools)
install_github("GeoBosh/lagged")
#+END_EXAMPLE

* Overview

The package provides several classes with methods for indexing starting from zero. Objects
can be created with the function ~Lagged()~. It returns a suitable Lagged object from a class
suitable for the argument:
#+BEGIN_EXAMPLE
library(lagged)
v_lagged <- Lagged(0:6)                           # 1d object
m_lagged <- Lagged(matrix(1:12, nrow = 4))        # 2d object
a_lagged <- Lagged(array(1:24, dim = c(4,3,2)))  # 3d object
#+END_EXAMPLE

It recognises also ~"acf"~ objects from base R time series functions:
#+BEGIN_EXAMPLE
ap_lagged <- Lagged(acf(AirPassengers, plot = FALSE))
#+END_EXAMPLE

The maximal lag stored in the object can be obtained with ~maxLag()~:
#+BEGIN_EXAMPLE
maxLag(v_lagged)
maxLag(m_lagged)
maxLag(a_lagged)
#+END_EXAMPLE
The length of the objects is equal to ~maxlag(object) + 1~.
#+BEGIN_EXAMPLE
length(v_lagged)
length(m_lagged)
length(a_lagged)
#+END_EXAMPLE
Subsetting with ~"["~ drops the laggedness and returns vector, matrix, or array, depending on
the dimension of the object. 
Subsetting with one index gives the data for the requested lags:
#+BEGIN_EXAMPLE
tmp <- v_lagged[0:2]
tmp <- m_lagged[0:2]
tmp <- a_lagged[0:1]
#+END_EXAMPLE
Values beyond the maximal lag are ~NA~. 
Dimensions are not dropped if an extent has length one (i.e. ~drop = FALSE~):
#+BEGIN_EXAMPLE
v_lagged[0]
m_lagged[0]
a_lagged[0]
#+END_EXAMPLE
To drop dimensions, use "[[":
#+BEGIN_EXAMPLE
v_lagged[[0]]
m_lagged[[0]]
a_lagged[[0]]
#+END_EXAMPLE
Arithmetic operations and mathematical functions are defined naturally on lagged
objects. The shorter one is extended with ~NA~'s to the length of the longer. 

Operations between lagged and base R objects are defined, as well. However, it is an error to
do operations between objects whose dimensions do not match, unless the base R object is a
scalar, or, more generally, has the size of ~x[[0] ]~.
