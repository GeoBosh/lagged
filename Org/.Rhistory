library(lagged)
ew
 new("FlexibleLagged", t.test(1:10))
methods(rep)
maxlag(0)
maxLag(0)
maxLag(1:2)
array( 0, dim = c(2,2,2))
is.vector(array(0, dim = c(2,2,2)))
is.structure(array(0, dim = c(2,2,2)))
?is.vector
is(array(0, dim = c(2,2,2)), "vector")
showClass("vector")
ls(asNamespace("lagged"))
ls(as.environment("lagged"))
ls(as.environment("package:lagged"))
ls(as.environment("package:lagged"), all.names=TRUE)
ls(asNamespace("lagged"), all.names = TRUE)
library(Rdpack)
y
library(Rdpack)
library(lagged)
reprompt(whichLagged)
reprompt(acf2Lagged)
y
?acf
library(lagged)
acf2Lagged(acf(lh))
acf2Lagged(acf(ts.union(mdeaths, fdeaths)))
acf(ts.union(mdeaths, fdeaths))[,,15]
acf(ts.union(mdeaths, fdeaths))[15]
acf(ts.union(mdeaths, fdeaths))[15,,]
acf(ts.union(mdeaths, fdeaths))[15]
acf(ts.union(mdeaths, fdeaths))[15, 1, 1]
dim(acf(ts.union(mdeaths, fdeaths)))
dim(acf(ts.union(mdeaths, fdeaths))$acf)
acf(ts.union(mdeaths, fdeaths))$acf[15,,]
base_acf
dim(base_acf$acf)
dimnames(base_acf$acf)
dimnames(base_acf)
ls()
deaths_acf$data
deaths_acf@data
tmp <- deaths_acf@data
dim(tmp)
dimnames(tmp <- list(c("",""), c("",""), paste0("Lag_",0:15))
dimnames(tmp) <- list(c("",""), c("",""), paste0("Lag_",0:15))
tmp
y
library(lagged)
deaths_acf
Lagged
?Summary
library)"lagged")
library("lagged")
Lagged(0:4)
a <- Lagged(0:4)
a + 1
abs(a)
a > 0
?abs
devtools::load_all()
devtools::load_all()
abs(a)
-a
+ a
sinpi(a)
cospi(a)
?"-"
?Ops
devtools::load_all()
+ a
-a
Summary
devtools::load_all()
any(a>0)
all(a>0)
range(a)
min(a)
max(a)
prod(a)
sum(a)
?order
?round
ceiling(a1)
floor(a1)
trunc(a1)
devtools::load_all()
trunc(a1)
round(a1)
round(a1, 2)
devtools::install()
devtools::install()
getwd()
c(Prod = prod(la1), Sum = sum(la1), Any = any(la1 < 0), All = all(la1 >= 0))
c(Any = any(la1 < 0), All = all(la1 >= 0))
head(letters)
head(cars)
y
devtools::load_all()
ls()
la1
la3 <- la1
maxLag(la3)
maxLag(la3) <- 5
c
devtools::load_all()
la3
maxLag(la3)
maxLag(la3) <- 5
la3
Rdpack::reprompt("maxLag<-")
?reprompt
Rdpack::reprompt("maxLag<-", filename = "maxLagass.Rd")
Rdpack::reprompt("maxLag<-", type = "methods", filename = "maxLagass-methods.Rd")
la3
maxLag(la3) <- 10
la3
asNamespace("lagged")
ls(asNamespace("lagged"))
asNamespace("lagged")
ls(asNamespace("lagged"))
showMethods("[<-")
showMethods("[[<-")
showMethods("[[")
a1
class(a1)
Rdpack::reprompt("[[<-", type = "methods", package = "Rdpack", filename = "bracketbracketass-methods.Rd")
Rdpack::reprompt("[[", package = "Rdpack", filename = "bracketbracketass.Rd")
Rdpack::reprompt("[[", type = "methods", package = "Rdpack", filename = "bracketbracket-methods.Rd")
showMethods("[[")
search()
y
library(lagged)
Rdpack::reprompt("[[", type = "methods", package = "Rdpack", filename = "bracketbracket-methods.Rd")
Rdpack::reprompt("[", type = "methods", package = "Rdpack", filename = "bracketbracket-methods.Rd")
Rdpack::reprompt("[[", type = "methods", package = "lagged", filename = "bracketbracket-methods.Rd")
Rdpack::reprompt("[[<-", type = "methods", package = "lagged", filename = "bracketbracketass-methods.Rd")
a1
class(a1)
Lagged(a1)
class(acv0)
la2[1]
la2
la2 <- acf2Lagged(a2)
a2
class(acv2)
a2[1:2, , ]
a2[1, , ]
a2[2, , ]
class(acv2)
class(acv2)
?acf
methods("["
)
stats:::"[.acf"
acv2$lag
match(0:2, acv2$lag[, 1, 1], nomatch = NA_integer_)
acv2$lag[, 1, 1]
lags
acv2$lag
ts.union(mdeaths, fdeaths)
head(ts.union(mdeaths, fdeaths))
(ts.union(mdeaths, fdeaths))
frequency(ts.union(mdeaths, fdeaths))
showClass("Lagged")
getwd()
y
library(lagged)
Rdpack::ereprompt("../man/maxLag.Rd")
Rdpack::ereprompt("../man/bracket.Rd")
Rdpack::ereprompt("../man/bracket-methods.Rd")
Rdpack::ereprompt("../man/bracket-methods.Rd", package = "lagged")
Rdpack::ereprompt("../man/bracketass-methods.Rd", package = "lagged")
getwd()
n
